clear all

%% Import data from text file
% Script for importing data from the following text file:

filename = '/Users/caglademirkan/Documents/MATLAB/behavioral_data/sub001_02046775_fMRItask_V2021.2.3.3_new_2024_Apr_02_1055.csv';

%% set up import options
% Auto-generated by MATLAB on 19-Feb-2024 11:17:28

opts = delimitedTextImportOptions("NumVariables", 155, "Encoding", "UTF-8");

% Specify range and delimiter
opts.DataLines = [2, Inf];
opts.Delimiter = ",";

% Specify column names and types
opts.VariableNames = ["conditionBlock", "instImg", "instText", "blockImg", "stim1", "stim2", "stim3", "stim1prob", "stim2prob", "stim3prob", "normProb1", "normProb2", "normProb3", "corrAns1", "corrAns2", "corrAns3", "oldAlien", "oldAlienIndex", "newAlien", "newAlienIndex", "sentence", "conditionsthisRepN", "conditionsthisTrialN", "conditionsthisN", "conditionsthisIndex", "trialsthisRepN", "trialsthisTrialN", "trialsthisN", "trialsthisIndex", "image_3started", "image_3stopped", "key_respkeys", "key_resprt", "key_respstarted", "key_respstopped", "key_resp_nextkeys", "key_resp_nextrt", "key_resp_nextstarted", "key_resp_nextstopped", "ConditionStart0fmri", "image_2started", "image_2stopped", "block_Inststarted", "block_Inststopped", "space_for_nextkeys", "space_for_nextrt", "space_for_nextstarted", "space_for_nextstopped", "BlockStart1fmri", "textstarted", "textstopped", "jitter1_durationfmri", "jitter1_startfmri", "jitter1_stopfmri", "text_3started", "text_3stopped", "TrialStartfmri", "blockImagestarted", "blockImagestopped", "stimLeftstarted", "stimLeftstopped", "stimCenterstarted", "stimCenterstopped", "stimRightstarted", "stimRightstopped", "progressFeedbackstarted", "progressFeedbackstopped", "progressFeedback_textstarted", "progressFeedback_textstopped", "key_responsekeys", "key_responsestarted", "key_responsestopped", "reward_Tot", "current_condition", "correct_answer", "inst_key_pressed", "Respondfmri", "blockImage_3started", "blockImage_3stopped", "stimLeft_3started", "stimLeft_3stopped", "stimCenter_3started", "stimCenter_3stopped", "stimRight_3started", "stimRight_3stopped", "partChoicestarted", "partChoicestopped", "particYourChoicestarted", "particYourChoicestopped", "progresssFeedback_2started", "progresssFeedback_2stopped", "progressFeedback_text_2started", "progressFeedback_text_2stopped", "bgstarted", "bgstopped", "image_leftstarted", "image_leftstopped", "image_rightstarted", "image_rightstopped", "image_centerstarted", "image_centerstopped", "text_6started", "text_6stopped", "jitter2_durationfmri", "jitter2_startfmri", "jitter2_stopfmri", "text_4started", "text_4stopped", "feedbackStartfmri", "feedbackStopfmri", "blockImage_2started", "blockImage_2stopped", "stimLeft_2started", "stimLeft_2stopped", "stimCenter_2started", "stimCenter_2stopped", "stimRight_2started", "stimRight_2stopped", "partChoice_2started", "partChoice_2stopped", "particYourChoice_2started", "particYourChoice_2stopped", "pointFeedbackstarted", "pointFeedbackstopped", "pointFeedback_textstarted", "pointFeedback_textstopped", "progressFeedback_3started", "progressFeedback_3stopped", "progressFeedback_text_3started", "progressFeedback_text_3stopped", "participant_block_bonus", "participant_block_accuracy", "BlockfeedbackStartfmri", "block_feedbackMsgstarted", "block_feedbackMsgstopped", "BlockfeedbackStopfmri", "key_responsert", "BlockStart2fmri", "BlockStart3fmri", "BlockStart4fmri", "participant_condition_bonus", "participant_condition_accuracy", "condition_feedbackAccuracystarted", "condition_feedbackAccuracystopped", "ConditionStart1fmri", "endExperimentfmri", "text_5started", "text_5stopped", "participant", "session", "date", "expName", "psychopyVersion", "frameRate", "VarName155"];
opts.VariableTypes = ["double", "categorical", "categorical", "categorical", "categorical", "categorical", "categorical", "double", "double", "double", "double", "double", "double", "categorical", "categorical", "categorical", "categorical", "double", "categorical", "double", "categorical", "double", "double", "double", "double", "double", "double", "double", "double", "double", "double", "double", "double", "double", "string", "double", "double", "double", "string", "double", "double", "double", "double", "categorical", "categorical", "double", "double", "categorical", "double", "categorical", "categorical", "double", "double", "double", "double", "categorical", "double", "double", "categorical", "double", "categorical", "double", "categorical", "double", "categorical", "double", "categorical", "double", "categorical", "double", "double", "categorical", "double", "double", "double", "double", "double", "double", "categorical", "double", "categorical", "double", "categorical", "double", "categorical", "double", "categorical", "double", "categorical", "double", "categorical", "double", "categorical", "categorical", "categorical", "categorical", "categorical", "categorical", "categorical", "categorical", "categorical", "categorical", "categorical", "double", "double", "double", "double", "categorical", "double", "double", "double", "categorical", "double", "categorical", "double", "categorical", "double", "categorical", "double", "categorical", "double", "categorical", "double", "categorical", "double", "categorical", "double", "categorical", "double", "categorical", "double", "double", "double", "double", "categorical", "double", "double", "double", "double", "double", "double", "double", "double", "string", "double", "string", "double", "double", "categorical", "double", "categorical", "categorical", "categorical", "double", "string"];

% Specify file level properties
opts.ExtraColumnsRule = "ignore";
opts.EmptyLineRule = "read";

% Specify variable properties
opts = setvaropts(opts, ["key_respstopped", "key_resp_nextstopped", "condition_feedbackAccuracystopped", "endExperimentfmri", "VarName155"], "WhitespaceRule", "preserve");
opts = setvaropts(opts, ["instImg", "instText", "blockImg", "stim1", "stim2", "stim3", "corrAns1", "corrAns2", "corrAns3", "oldAlien", "newAlien", "sentence", "key_respstopped", "key_resp_nextstopped", "block_Inststopped", "space_for_nextkeys", "space_for_nextstopped", "textstarted", "textstopped", "text_3stopped", "blockImagestopped", "stimLeftstopped", "stimCenterstopped", "stimRightstopped", "progressFeedbackstopped", "progressFeedback_textstopped", "key_responsestopped", "blockImage_3stopped", "stimLeft_3stopped", "stimCenter_3stopped", "stimRight_3stopped", "partChoicestopped", "particYourChoicestopped", "progresssFeedback_2stopped", "progressFeedback_text_2stopped", "bgstarted", "bgstopped", "image_leftstarted", "image_leftstopped", "image_rightstarted", "image_rightstopped", "image_centerstarted", "image_centerstopped", "text_6started", "text_6stopped", "text_4stopped", "blockImage_2stopped", "stimLeft_2stopped", "stimCenter_2stopped", "stimRight_2stopped", "partChoice_2stopped", "particYourChoice_2stopped", "pointFeedbackstopped", "pointFeedback_textstopped", "progressFeedback_3stopped", "progressFeedback_text_3stopped", "block_feedbackMsgstopped", "condition_feedbackAccuracystopped", "endExperimentfmri", "participant", "date", "expName", "psychopyVersion", "VarName155"], "EmptyFieldRule", "auto");
opts = setvaropts(opts, ["image_3stopped", "image_2stopped", "text_5started", "text_5stopped"], "TrimNonNumeric", true);
opts = setvaropts(opts, ["image_3stopped", "image_2stopped", "text_5started", "text_5stopped"], "ThousandsSeparator", ",");

% Import the data
beh_log = readtable(filename, opts);

%% Clear temporary variables
clear opts

%% Extract useful columns

fmri_block_onsets = [];
for i=1:4 % for each of the 4 repetitions of a condition
    eval(strcat('fmri_block_onsets = [fmri_block_onsets; find(~isnan(beh_log.BlockStart',num2str(i),'fmri))];'));
end
fmri_block_onsets = sort(fmri_block_onsets);

stimuli_all = [];
feedback_all = [];
for i=1:length(fmri_block_onsets)
    % for i=1

    if i < length(fmri_block_onsets)

        stimuli = [beh_log(fmri_block_onsets(i):fmri_block_onsets(i+1)-1,:).stim1 ...
            beh_log(fmri_block_onsets(i):fmri_block_onsets(i+1)-1,:).stim2 ...
            beh_log(fmri_block_onsets(i):fmri_block_onsets(i+1)-1,:).stim3];

        feedback = [beh_log(fmri_block_onsets(i):fmri_block_onsets(i+1)-1,:).corrAns1 ...
            beh_log(fmri_block_onsets(i):fmri_block_onsets(i+1)-1,:).corrAns2 ...
            beh_log(fmri_block_onsets(i):fmri_block_onsets(i+1)-1,:).corrAns3];
    else

        stimuli = [beh_log(fmri_block_onsets(i):end-1,:).stim1 ...
            beh_log(fmri_block_onsets(i):end-1,:).stim2 ...
            beh_log(fmri_block_onsets(i):end-1,:).stim3];

        feedback = [beh_log(fmri_block_onsets(i):end-1,:).corrAns1 ...
            beh_log(fmri_block_onsets(i):end-1,:).corrAns2 ...
            beh_log(fmri_block_onsets(i):end-1,:).corrAns3];
    end

    if size(stimuli,1) == 37
        stimuli(end,:) = [];
        feedback(end,:) = [];
    end

    stimuli_all = [stimuli_all; stimuli];
    feedback_all = [feedback_all; feedback];
end

unique_stimuli = unique(stimuli_all);

stimuli_code = zeros(size(stimuli_all));

for j=1:size(stimuli_all,1)
    for k=1:size(stimuli_all,2)
        stimuli_code(j,k) = find(unique_stimuli == stimuli_all(j,k));
    end
end

feedback_code = feedback_all~='miss';

%% Rescorla-Wagner Model with Choice Kernel for 3-Armed Bandit Task

%% Define learning rate and softmax temperature range

%     Eta_RWCK = 0: 0.1: 1;
%     Eta_c_RWCK = 0:0.1:1; % choice kernel
%     Beta_RWCK = [0: 0.5: 5]+.001;
%     Beta_c_RWCK = [0:3:30]+.001; % choice kernel

Eta_RWCK = 0: .1: 1;
Eta_c_RWCK = 0: .2: 2; % choice kernel
Beta_RWCK = 0:2.5:25;
Beta_c_RWCK = 0:2.5:25;

%% Initialize arrays for log likelihood and prediction errors

for e = 1: length(Eta_RWCK)
    for ec = 1:length(Eta_c_RWCK)
        for b = 1:length(Beta_RWCK)
            for bc = 1:length(Beta_c_RWCK)
                [e/length(Eta_RWCK) ec/length(Eta_c_RWCK) b/length(Beta_RWCK) bc/length(Beta_c_RWCK)]

                V = ones(1, length(unique(stimuli_code)))/length(unique(stimuli_code)); % Initial values for the 10 stimuli, indicating no prior knowledge
                C = ones(1, length(unique(stimuli_code)))/length(unique(stimuli_code)); % Initial values for the 10 stimuli, indicating no prior knowledge


                %% Loop over each trial to simulate responses
                for t = 1:size(stimuli_code,1)

                    % Calculate the probability of choosing each option for the current trial
                    expValues = exp(Beta_RWCK(b) * V(stimuli_code(t,:)) + Beta_c_RWCK(bc) * C(stimuli_code(t,:)));
                    probabilities = expValues / sum(expValues); % Probability of choosing each option

                    cumprobs = cumsum(probabilities);
                    randnumber = rand(1);

                    if randnumber < cumprobs(1)
                        simulated_response = 1;
                    elseif randnumber < cumprobs(2)
                        simulated_response = 2;
                    else
                        simulated_response = 3;
                    end

                    outcome = feedback_code(t,simulated_response);

                    % update values
                    PE  = outcome - V(stimuli_code(t,simulated_response)); % compute prediction error
                    V(stimuli_code(t,simulated_response)) = V(stimuli_code(t,simulated_response)) + Eta_RWCK(e)*PE;    % update value

                    C(stimuli_code(t,simulated_response)) = C(stimuli_code(t,simulated_response)) + Eta_c_RWCK(ec)*(1 - C(stimuli_code(t,simulated_response)));
                    %                         C(setdiff(stimuli_code(t,:),stimuli_code(t,simulated_response))) = C(setdiff(stimuli_code(t,:),stimuli_code(t,simulated_response))) + Eta_c_RWCK(ec)*(0 - C(setdiff(stimuli_code(t,:),stimuli_code(t,simulated_response))));

                    simchoice(t) = simulated_response;
                    rewards(t) = outcome;

                end

                try
                    [PE_regressor_RWCK, best_Beta_RWCK, best_Beta_c_RWCK, best_Eta_RWCK, best_Eta_c_RWCK, max_loglikelihood_RWCK, AIC_RWCK] = RescorlaWagner_ChoiceKernel(stimuli_code, simchoice, rewards, 0);
                catch
                    best_Beta_RWCK = NaN;
                    best_Beta_c_RWCK = NaN;
                    best_Eta_RWCK = NaN;
                    best_Eta_c_RWCK = NaN;
                end
                try
                    fitted_beta_rwck(e,ec,b,bc) = best_Beta_RWCK;
                    fitted_beta_c_rwck(e,ec,b,bc) = best_Beta_c_RWCK;
                    fitted_eta_rwck(e,ec,b,bc) = best_Eta_RWCK;
                    fitted_eta_c_rwck(e,ec,b,bc) = best_Eta_c_RWCK;
                catch
                    fitted_beta_rwck(e,ec,b,bc) = randsample(best_Beta_RWCK,1);
                    fitted_beta_c_rwck(e,ec,b,bc) = randsample(best_Beta_c_RWCK,1);
                    fitted_eta_rwck(e,ec,b,bc) = randsample(best_Eta_RWCK,1);
                    fitted_eta_c_rwck(e,ec,b,bc) = randsample(best_Eta_c_RWCK,1);
                end

                true_beta_rwck(e,ec,b,bc) = Beta_RWCK(b);
                true_beta_c_rwck(e,ec,b,bc) = Beta_c_RWCK(bc);
                true_eta_rwck(e,ec,b,bc) = Eta_RWCK(e);
                true_eta_c_rwck(e,ec,b,bc) = Eta_c_RWCK(ec);

            end
        end
    end
end

beta_rwck_corr = corr(fitted_beta_rwck(:),true_beta_rwck(:),'rows','complete');
beta_c_rwck_corr = corr(fitted_beta_c_rwck(:),true_beta_c_rwck(:),'rows','complete');
eta_rwck_corr = corr(fitted_eta_rwck(:),true_eta_rwck(:),'rows','complete');
eta_c_rwck_corr = corr(fitted_eta_c_rwck(:),true_eta_c_rwck(:),'rows','complete');

figure;

try
    subplot(2,2,1)
    hold on
    [N,XEDGES,YEDGES] = histcounts2(true_eta_rwck(:),fitted_eta_rwck(:),Eta_RWCK,Eta_RWCK);
    imagesc(Eta_RWCK,Eta_RWCK,N')
    %     scatter(true_eta(:),fitted_eta(:),'.')
    %     bs = regress(fitted_eta(:),[true_eta(:)*0+1 true_eta(:)]);
    %     line(eta,bs(1)+bs(2)*eta,'color','red')
    xlim([XEDGES(1) XEDGES(end)])
    ylim([XEDGES(1) XEDGES(end)])
    xlabel('true eta')
    ylabel('fitted eta')
    title(strcat('r = ',num2str(eta_rwck_corr)))

catch
end
try

    subplot(2,2,2)
    hold on
    [N,XEDGES,YEDGES] = histcounts2(true_eta_c_rwck(:),fitted_eta_c_rwck(:),Eta_c_RWCK,Eta_c_RWCK);
    imagesc(Eta_c_RWCK,Eta_c_RWCK,N')
    %     scatter(true_eta(:),fitted_eta(:),'.')
    %     bs = regress(fitted_eta(:),[true_eta(:)*0+1 true_eta(:)]);
    %     line(eta,bs(1)+bs(2)*eta,'color','red')
    xlim([XEDGES(1) XEDGES(end)])
    ylim([XEDGES(1) XEDGES(end)])
    xlabel('true eta c')
    ylabel('fitted eta c')
    title(strcat('r = ',num2str(eta_c_rwck_corr)))


catch
end
try

    subplot(2,2,3)
    hold on
    [N,XEDGES,YEDGES] = histcounts2(true_beta_rwck(:),fitted_beta_rwck(:),Beta_RWCK,Beta_RWCK);
    imagesc(Beta_RWCK,Beta_RWCK,N')
    %     scatter(true_eta(:),fitted_eta(:),'.')
    %     bs = regress(fitted_eta(:),[true_eta(:)*0+1 true_eta(:)]);
    %     line(eta,bs(1)+bs(2)*eta,'color','red')
    xlim([XEDGES(1) XEDGES(end)])
    ylim([XEDGES(1) XEDGES(end)])
    xlabel('true beta')
    ylabel('fitted beta')
    title(strcat('r = ',num2str(beta_rwck_corr)))


catch
end
try

    subplot(2,2,4)
    hold on
    [N,XEDGES,YEDGES] = histcounts2(true_beta_c_rwck(:),fitted_beta_c_rwck(:),Beta_c_RWCK,Beta_c_RWCK);
    imagesc(Beta_c_RWCK,Beta_c_RWCK,N')
    %     scatter(true_eta(:),fitted_eta(:),'.')
    %     bs = regress(fitted_eta(:),[true_eta(:)*0+1 true_eta(:)]);
    %     line(eta,bs(1)+bs(2)*eta,'color','red')
    xlim([XEDGES(1) XEDGES(end)])
    ylim([XEDGES(1) XEDGES(end)])
    xlabel('true beta c')
    ylabel('fitted beta c')
    title(strcat('r = ',num2str(beta_c_rwck_corr)))

catch
end

